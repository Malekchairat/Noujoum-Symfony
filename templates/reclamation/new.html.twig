{% extends 'base.html.twig' %}

{% block title %}New Reclamation{% endblock %}

{% block body %}
    <div class="container py-5">
        <h1 class="mb-4">Create New Reclamation</h1>

        <div class="card shadow">
            <div class="card-body">
                {{ form_start(form, {'attr': {'novalidate': 'novalidate'}}) }}

                <div class="mb-3">
                    {{ form_label(form.titre, null, {'label_attr': {'class': 'form-label'}}) }}
                    {{ form_widget(form.titre, {
                        'attr': {
                            'id': 'titre',
                            'class': 'form-control' ~ (form.titre.vars.errors|length > 0 ? ' is-invalid' : '')
                        }
                    }) }}
                    <div id="titre-error" class="invalid-feedback d-none"></div>

                    {{ form_errors(form.titre) }}
                </div>

                <div class="mb-4">
                    {{ form_label(form.description, null, {'label_attr': {'class': 'form-label'}}) }}
                    {{ form_widget(form.description, {
                        'attr': {
                            'id': 'description',
                            'class': 'form-control' ~ (form.description.vars.errors|length > 0 ? ' is-invalid' : ''),
                            'rows': 5
                        }
                    }) }}
                    <div id="description-error" class="invalid-feedback d-none"></div>
                    <div id="gemini-spinner" class="d-none text-center mb-3">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Vérification en cours...</span>
                        </div>
                        <div class="mt-2">Analyse du contenu par IA...</div>
                    </div>

                    <small id="description-error-badwords" class="text-danger"></small>


                    {{ form_errors(form.description) }}
                </div>



                <button id="submit-btn" type="submit" class="btn btn-primary">
                    <i class="bi bi-send-fill me-2"></i> Submit Reclamation
                </button>



                {{ form_end(form) }}
            </div>
        </div>
    </div>

    <script>
        const GEMINI_API_KEY = "AIzaSyCWYXrEGlHeFdgJ-HEgeP-d-53vxgsxCso";
        const GEMINI_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`;

        async function checkBadWordsWithGemini(text) {
            const prompt = `Ce texte contient-il des mots inappropriés ou offensants en anglais, français ou arabe ? Réponds uniquement par "oui" ou "non". Texte : "${text}"`;

            try {
                const response = await fetch(GEMINI_URL, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        contents: [{ parts: [{ text: prompt }] }]
                    })
                });

                const result = await response.json();
                const reply = result?.candidates?.[0]?.content?.parts?.[0]?.text?.toLowerCase() || "";

                return reply.includes("oui");
            } catch (error) {
                console.error("Erreur lors de l'appel à Gemini", error);
                return false; // fail-safe: autorise si l’API échoue
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            const form = document.querySelector('form');
            const titreInput = document.getElementById('user_reclamation_titre');
            const descriptionInput = document.getElementById('user_reclamation_description');
            const titreError = document.getElementById('titre-error');
            const descriptionError = document.getElementById('description-error');
            const descriptionBadwordsError = document.getElementById('description-error-badwords');
            const submitBtn = document.getElementById('submit-btn');
            const spinner = document.getElementById('gemini-spinner');

            titreInput.addEventListener('input', function () {
                const value = titreInput.value.trim();
                let message = "";

                if (/^\d/.test(value)) {
                    message = "Le titre ne doit pas commencer par un chiffre.";
                } else if (value.length <= 5) {
                    message = "Le titre doit contenir plus de 5 caractères.";
                }

                const isValid = message === "";
                titreInput.classList.toggle('is-invalid', !isValid);
                titreInput.classList.toggle('is-valid', isValid);
                titreError.textContent = message;
                titreError.classList.toggle('d-none', isValid);
                titreError.classList.toggle('d-block', !isValid);
            });

            descriptionInput.addEventListener('input', function () {
                const value = descriptionInput.value.trim();
                let message = "";

                if (value.length <= 10) {
                    message = "La description doit contenir plus de 10 caractères.";
                }

                const isValid = message === "";
                descriptionInput.classList.toggle('is-invalid', !isValid);
                descriptionInput.classList.toggle('is-valid', isValid);
                descriptionError.textContent = message;
                descriptionError.classList.toggle('d-none', isValid);
                descriptionError.classList.toggle('d-block', !isValid);
                descriptionBadwordsError.textContent = "";
            });

            form.addEventListener('submit', async function (e) {
                e.preventDefault(); // toujours bloquer par défaut, on relancera manuellement

                const description = descriptionInput.value.trim();
                descriptionBadwordsError.textContent = "";

                if (description.length <= 10) {
                    descriptionInput.classList.add('is-invalid');
                    descriptionError.textContent = "La description doit contenir plus de 10 caractères.";
                    descriptionError.classList.remove('d-none');
                    return;
                }

                submitBtn.disabled = true;
                spinner.classList.remove('d-none');

                const hasBadWords = await checkBadWordsWithGemini(description);

                spinner.classList.add('d-none');

                if (hasBadWords) {
                    descriptionInput.classList.add('is-invalid');
                    descriptionBadwordsError.textContent = "⚠️ La description contient des mots inappropriés.";
                    submitBtn.disabled = false;
                    return; // stop submit
                }

                // ✅ Tout est bon : on soumet le formulaire "manuellement"
                form.submit();
            });
        });
    </script>

    <style>
        .is-invalid {
            border-color: #dc3545;
        }

        .is-valid {
            border-color: #198754;
        }
        .invalid-feedback {
            display: block;
        }
        .d-block {
            display: block;
        }
        .d-none {
            display: none;
        }
        .text-danger {
            color: #dc3545;
        }
        .text-success {
            color: #198754;
        }
        </style>



{% endblock %}
