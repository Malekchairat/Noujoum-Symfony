{% extends 'base.html.twig' %}

{% block title %}Checkout - Noujoum{% endblock %}

{% block body %}
<!-- Start Hero Section -->
<div class="hero">
    <div class="container">
        <div class="row justify-content-between">
            <div class="col-lg-5">
                <div class="intro-excerpt">
                    <h1>Checkout</h1>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- End Hero Section -->

<div class="untree_co-section">
    <div class="container">
        <div class="row">
            <!-- Billing Details -->
            <div class="col-md-6 mb-5 mb-md-0">
                <h2 class="h3 mb-3 text-black">Billing Details</h2>
                <div class="p-3 p-lg-5 border bg-white">
                    {{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': 'novalidate', 'id': 'checkoutForm'}}) }}
                    
                    <div class="form-group row">
                        <div class="col-md-12">
                            {{ form_row(form.rue, {'attr': {'class': 'form-control'}, 'label': 'Street Address'}) }}
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="col-md-6">
                            {{ form_row(form.ville, {'attr': {'class': 'form-control'}, 'label': 'City'}) }}
                        </div>
                        <div class="col-md-6">
                            {{ form_row(form.code_postal, {'attr': {'class': 'form-control'}, 'label': 'Postal Code'}) }}
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="col-md-12">
                            {{ form_row(form.methodePaiment, {'attr': {'class': 'form-select'}, 'label': 'Payment Method'}) }}
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="col-md-12">
                            {{ form_row(form.etat, {'attr': {'class': 'form-select'}, 'label': 'State'}) }}
                        </div>
                    </div>

                    <div class="form-group mt-4">
                        <button type="button" id="placeOrderBtn" class="btn btn-primary">
                            <i class="fas fa-shopping-cart me-2"></i>
                            Passer la commande
                        </button>
                    </div>

                    {{ form_end(form) }}
                </div>
            </div>

            <!-- Your Order -->
            <div class="col-md-6">
                <h2 class="h3 mb-3 text-black">Your Order</h2>
                <div class="p-3 p-lg-5 border bg-white">
                    <table class="table site-block-order-table mb-5">
                        <thead>
                            <tr>
                                <th>Product</th>
                                <th>Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for item in cartItems %}
                            <tr>
                                <td>{{ item.produit.nom }} <strong class="mx-2">x</strong> {{ item.nbrProduit }}</td>
                                <td>{{ item.getTotal() }} ‚Ç¨</td>
                            </tr>
                            {% endfor %}
                            <tr>
                                <td class="text-black font-weight-bold"><strong>Order Total</strong></td>
                                <td class="text-black font-weight-bold"><strong>{{ total }} ‚Ç¨</strong></td>
                            </tr>
                            <a href="{{ path('app_commande_historique') }}" class="btn btn-primary">
  Voir mon historique de commandes
</a>

                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Debug Information Section -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-dark text-white">
                        <h5 class="mb-0">Debug Information</h5>
                    </div>
                    <div class="card-body">
                        <div id="debugInfo" class="text-muted">
                            <p>Waiting for order process...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Loading Spinner -->
<div id="loadingSpinner" class="position-fixed top-0 start-0 w-100 h-100 d-none" style="background: rgba(0,0,0,0.5); z-index: 9999;">
    <div class="d-flex justify-content-center align-items-center h-100">
        <div class="spinner-border text-light" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
</div>

<script>
function updateDebugInfo(message, isError = false) {
    const debugInfo = document.getElementById('debugInfo');
    const timestamp = new Date().toLocaleTimeString();
    const messageDiv = document.createElement('div');
    messageDiv.innerHTML = `<strong>[${timestamp}]</strong> ${message}`;
    messageDiv.style.color = isError ? 'red' : 'inherit';
    debugInfo.prepend(messageDiv);
}

function validateField(field) {
    let isValid = true;
    let errorMessage = "";

    if (!field.value.trim()) {
        errorMessage = "üö® This field cannot be empty!";
        isValid = false;
    } else if (field.name === "rue" && !/^[a-zA-Z0-9\s]+$/.test(field.value)) {
        errorMessage = "üö´ No special characters allowed!";
        isValid = false;
    } else if (field.name === "rue" && field.value.length > 35) {
        errorMessage = "‚ö†Ô∏è Keep it short! Max 35 characters.";
        isValid = false;
    } else if (field.name === "ville" && !/^[a-zA-Z\s]+$/.test(field.value)) {
        errorMessage = "ü§® Only letters allowed!";
        isValid = false;
    } else if (field.name === "ville" && field.value.length > 10) {
        errorMessage = "üìè Max 10 characters, please!";
        isValid = false;
    } else if (field.name === "code_postal" && !/^\d{4,5}$/.test(field.value)) {
        errorMessage = "üî¢ Must be 4-5 digits only!";
        isValid = false;
    }

    if (!isValid) {
        field.classList.add("is-invalid");
        field.nextElementSibling.innerHTML = errorMessage;
    } else {
        field.classList.remove("is-invalid");
        field.classList.add("is-valid");
        field.nextElementSibling.innerHTML = "";
    }

    return isValid;
}

function validateForm() {
    const form = document.getElementById('checkoutForm');
    const fields = form.querySelectorAll(".form-control");
    const submitBtn = document.getElementById('placeOrderBtn');
    let allValid = true;

    fields.forEach(field => {
        if (!validateField(field)) {
            allValid = false;
        }
    });

    submitBtn.disabled = !allValid;
    return allValid;
}

document.addEventListener("DOMContentLoaded", function () {
    const form = document.getElementById('checkoutForm');
    const fields = form.querySelectorAll(".form-control");

    fields.forEach(field => {
        field.insertAdjacentHTML("afterend", '<div class="invalid-feedback"></div>');
        field.addEventListener("input", function () {
            validateField(this);
            validateForm();
        });
    });

    validateForm();
});

document.getElementById('placeOrderBtn').addEventListener('click', async function() {
    if (!validateForm()) {
        updateDebugInfo('Please fill in all required fields correctly', true);
        return;
    }

    const spinner = document.getElementById('loadingSpinner');
    const form = document.getElementById('checkoutForm');
    
    try {
        updateDebugInfo('Starting order process...');
        spinner.classList.remove('d-none');
        
        const formData = new FormData(form);
        updateDebugInfo(`Submitting form to: ${form.action}`);
        
        const orderResponse = await fetch(form.action, {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        });

        updateDebugInfo(`Order response status: ${orderResponse.status}`);
        
        if (!orderResponse.ok) {
            const errorText = await orderResponse.text();
            updateDebugInfo(`Order error: ${errorText}`, true);
            throw new Error('Failed to place order');
        }

        const orderResult = await orderResponse.json();
        updateDebugInfo(`Order result: ${JSON.stringify(orderResult)}`);
        
        if (orderResult.success) {
            updateDebugInfo('Order successful, sending confirmation email...');
            const emailResponse = await fetch(`/api/order/confirm/${orderResult.orderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });

            updateDebugInfo(`Email response status: ${emailResponse.status}`);
            
            if (!emailResponse.ok) {
                const emailError = await emailResponse.text();
                updateDebugInfo(`Email error: ${emailError}`, true);
            } else {
                const emailResult = await emailResponse.json();
                updateDebugInfo(`Email result: ${JSON.stringify(emailResult)}`);
            }

            window.location.href = '{{ path('app_postcheckout', {'id': 'PLACEHOLDER'}) }}'.replace('PLACEHOLDER', orderResult.orderId);
        }
    } catch (error) {
        updateDebugInfo(`Process error: ${error.message}`, true);
        alert('Une erreur est survenue lors de la commande. Veuillez r√©essayer.');
    } finally {
        spinner.classList.add('d-none');
    }
});
</script>

<style>
.btn-primary {
    background-color: #4e73df;
    border-color: #4e73df;
}
.btn-primary:hover {
    background-color: #2e59d9;
    border-color: #2e59d9;
}
#debugInfo {
    max-height: 300px;
    overflow-y: auto;
    font-family: monospace;
    white-space: pre-wrap;
}
.is-invalid {
    border-color: #dc3545;
}
.is-valid {
    border-color: #28a745;
}
</style>
{% endblock %}