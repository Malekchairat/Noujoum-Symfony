{% extends 'base.html.twig' %}

{% block title %}Your Cart - Noujoum{% endblock %}

{% block body %}
<div style="background-color: #2f2f2f; min-height: 100vh;">
    <div class="untree_co-section before-footer-section py-5">
        <div class="container">
            <div class="row">
                {% if cartItems is defined and cartItems|length > 0 %}
                    {% for item in cartItems %}
                        <div class="col-md-4 mb-4">
                            <div class="card bg-dark text-white h-100 shadow">
                                {% if item.produit is not null and item.produit.imageName is not empty %}
                                    <img src="{{ asset('uploads/' ~ item.produit.imageName) }}" class="card-img-top" alt="{{ item.produit.nom }}">
                                {% else %}
                                    <img src="{{ asset('images/default.png') }}" class="card-img-top" alt="{{ item.produit is not null ? item.produit.nom : 'Default image' }}">
                                {% endif %}
                                <div class="card-body">
                                    <h5 class="card-title">
                                        {% if item.produit is not null %}
                                            {{ item.produit.nom }}
                                        {% else %}
                                            Product not available
                                        {% endif %}
                                    </h5>
                                    <p class="card-text">Price: <strong>
                                        {% if item.produit is not null %}
                                            {{ item.produit.prix }}€
                                        {% else %}
                                            N/A
                                        {% endif %}
                                    </strong></p>
                                    <p class="card-text">Quantity: <strong>{{ item.nbrProduit }}</strong></p>
                                    <p class="card-text">Total: <strong>{{ item.getTotal() }}€</strong></p>
                                </div>
                                <div class="card-footer bg-transparent border-top-0">
                                    <form method="post" action="{{ path('cart_remove', {'id': item.id}) }}" onsubmit="return confirm('Are you sure you want to remove this item?');">
                                        <input type="hidden" name="_token" value="{{ csrf_token('delete-item' ~ item.id) }}">
                                        <button type="submit" class="btn btn-danger btn-sm">Remove</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    {% endfor %}
                {% else %}
                    <div class="col-12">
                        <div class="alert alert-warning text-center">
                            Your cart is empty.
                        </div>
                    </div>
                {% endif %}
            </div>
            <div class="row align-items-center mt-5">
                <div class="col-md-6">
                    <a href="{{ path('app_shop') }}" class="btn btn-outline-light btn-block">Continue Shopping</a>
                </div>
                <div class="col-md-6 text-end">
                    <h3 class="text-white">Cart Totals</h3>
                    <p class="text-white">Subtotal: <strong>{{ totalPrice }}€</strong></p>
                    <p class="text-white">Total: <strong>{{ totalPrice }}€</strong></p>
                    <a href="{{ path('app_checkout') }}" class="btn btn-warning btn-lg mt-3">Proceed To Checkout</a>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
{% block javascripts %}
{{ parent() }}
<script>
    document.addEventListener('DOMContentLoaded', function() {
    // Generic function to handle cart updates
    async function updateCart(action, itemId, quantity = null) {
        let url;
        if (action === 'update') {
            url = `/cart/update/${itemId}/${quantity}`;
        } else if (action === 'remove') {
            url = `/cart/remove/${itemId}`;
        }

        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Accept': 'application/json',
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            return data;
        } catch (error) {
            console.error('Error in updateCart:', error);
            alert('An error occurred while updating the cart.');
            return { success: false };
        }
    }

    // Increase quantity
    document.querySelectorAll('.increase-btn').forEach(button => {
        button.addEventListener('click', async function() {
            const row = this.closest('.cart-item-row');
            const itemId = row.dataset.itemId;
            const input = row.querySelector('.quantity-input');
            const newQuantity = parseInt(input.value) + 1;

            const result = await updateCart('update', itemId, newQuantity);
            if (result.success) {
                input.value = newQuantity;
                row.querySelector('.item-total').textContent = `${result.newTotal} €`;
                updateCartTotals(result.cartTotal);
            }
        });
    });

    // Decrease quantity
    document.querySelectorAll('.decrease-btn').forEach(button => {
        button.addEventListener('click', async function() {
            const row = this.closest('.cart-item-row');
            const itemId = row.dataset.itemId;
            const input = row.querySelector('.quantity-input');
            const newQuantity = parseInt(input.value) - 1;

            if (newQuantity >= 0) {
                const result = await updateCart('update', itemId, newQuantity);
                if (result.success) {
                    if (newQuantity === 0) {
                        row.remove();
                    } else {
                        input.value = newQuantity;
                        row.querySelector('.item-total').textContent = `${result.newTotal} €`;
                    }
                    updateCartTotals(result.cartTotal);
                    checkEmptyCart();
                }
            }
        });
    });

    // Remove item
    document.querySelectorAll('.remove-btn').forEach(button => {
        button.addEventListener('click', async function(e) {
            e.preventDefault();
            const row = this.closest('.cart-item-row');
            const itemId = row.dataset.itemId;

            const result = await updateCart('remove', itemId);
            if (result.success) {
                row.remove();
                updateCartTotals(result.cartTotal);
                checkEmptyCart();
            }
        });
    });

    // Manual quantity change
    document.querySelectorAll('.quantity-input').forEach(input => {
        input.addEventListener('change', async function() {
            const row = this.closest('.cart-item-row');
            const itemId = row.dataset.itemId;
            const newQuantity = parseInt(this.value);

            if (!isNaN(newQuantity) && newQuantity >= 0) {
                const result = await updateCart('update', itemId, newQuantity);
                if (result.success) {
                    if (newQuantity === 0) {
                        row.remove();
                    } else {
                        this.value = newQuantity;
                        row.querySelector('.item-total').textContent = `${result.newTotal} €`;
                    }
                    updateCartTotals(result.cartTotal);
                    checkEmptyCart();
                }
            } else {
                this.value = 0;
            }
        });
    });

    function updateCartTotals(total) {
        document.getElementById('cart-subtotal').textContent = `${total} €`;
        document.getElementById('cart-total').textContent = `${total} €`;
    }

    function checkEmptyCart() {
        const items = document.querySelectorAll('.cart-item-row');
        if (items.length === 0) {
            document.querySelector('tbody').innerHTML = `
                <tr>
                    <td colspan="6" class="text-center py-5">
                        <h3>Your cart is empty</h3>
                        <p class="mt-3">
                            <a href="{{ path('app_shop') }}" class="btn btn-primary">Go Shopping</a>
                        </p>
                    </td>
                </tr>
            `;
           
            // Disable checkout button when cart is empty
            const checkoutButton = document.getElementById('checkoutButton');
            if (checkoutButton) {
                checkoutButton.classList.add('disabled');
            }
        }
    }
});
</script>
{% endblock %}