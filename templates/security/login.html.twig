<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Connexion</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@600&display=swap" rel="stylesheet">
    <script src="https://www.google.com/recaptcha/api.js?render=6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI"></script>
    <style>
        /* your existing styles remain the same */
        body {
            background-color: #000;
            background-image: url('/images/stars-bg.svg');
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
            font-family: 'Playfair Display', serif;
            color: #f8f9fa;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .form-container {
            position: relative;
            background: #121212;
            padding: 40px 30px;
            border-radius: 12px;
            box-shadow: 0 0 25px rgba(255, 215, 0, 0.1);
            max-width: 400px;
            width: 100%;
            text-align: center;
        }

        .form-container::before {
            content: '';
            position: absolute;
            top: -2px; left: -2px; right: -2px; bottom: -2px;
            z-index: -1;
            border-radius: 14px;
            background: linear-gradient(45deg, #FFD700, #e6c200);
        }

        .form-container h1 {
            color: #FFD700;
            margin-bottom: 30px;
        }

        .form-group { position: relative; margin-bottom: 20px; }

        .form-group i {
            position: absolute;
            top: 50%;
            left: 12px;
            transform: translateY(-50%);
            color: #FFD700;
        }

        .form-control {
            padding-left: 40px;
            background-color: #1e1e1e;
            border: 1px solid #444;
            border-radius: 5px;
            color: #fff;
        }

        .form-control:focus {
            border-color: #FFD700;
            box-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
        }

        .extra-links {
            font-size: 0.9rem;
        }
        .extra-links a { color: #FFD700; text-decoration: none; }
        .extra-links a:hover { text-decoration: underline; }

        .btn-gold {
            background-color: #FFD700;
            color: #000;
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 5px;
            font-weight: bold;
            transition: background 0.3s ease, transform 0.2s ease;
        }
        .btn-gold:hover {
            background-color: #e6c200;
            transform: scale(1.03);
        }

        .btn-facial {
            background-color: transparent;
            color: #FFD700;
            border: 1px solid #FFD700;
            width: 100%;
            padding: 10px;
            border-radius: 5px;
            font-weight: bold;
            margin-top: 15px;
            transition: background 0.3s ease, transform 0.2s ease;
        }
        .btn-facial:hover {
            background-color: #FFD700;
            color: #000;
            transform: scale(1.03);
        }

        .error-text {
            color: #ff6b6b;
            font-size: 0.85rem;
            margin-top: 0.25rem;
            display: none;
            text-align: left;
        }

        video {
            width: 100%;
            margin-top: 15px;
            display: none;
            border: 1px solid #FFD700;
            border-radius: 5px;
        }
    </style>
</head>
<body>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-12 col-md-8 col-lg-6 form-container">

            {# Flash messages #}
            {% for label, messages in app.flashes %}
                {% for message in messages %}
                    <div class="alert alert-{{ label == 'error' ? 'danger' : label }}" role="alert">
                        {{ message }}
                    </div>
                {% endfor %}
            {% endfor %}

            {% if error %}
                <div class="alert alert-danger">{{ error.messageKey|trans(error.messageData, 'security') }}</div>
            {% endif %}

            <h1>Connexion</h1>

            <form id="loginForm" method="post">
                <div class="form-group">
                    <i class="bi bi-person-fill"></i>
                    <input type="text" id="inputEmail" name="email" class="form-control" placeholder="Email" value="{{ last_username }}">
                    <div id="emailEmpty" class="error-text">Veuillez entrer votre email.</div>
                    <div id="emailNotFound" class="error-text">Cet email n'existe pas dans notre base.</div>
                </div>

                <div class="form-group">
                    <i class="bi bi-lock-fill"></i>
                    <input type="password" id="inputPassword" name="password" class="form-control" placeholder="Mot de passe">
                    <div id="passwordEmpty" class="error-text">Veuillez entrer votre mot de passe.</div>
                </div>

                <div class="extra-links text-end mb-3">
                    <a href="{{ path('app_forgot_password_request') }}">Mot de passe oublié ?</a>
                </div>

                <input type="hidden" name="_csrf_token" value="{{ csrf_token('authenticate') }}">
                <input type="hidden" id="recaptchaToken" name="recaptchaToken">

                <button type="submit" class="btn-gold mb-3">Se connecter</button>
            </form>

            <button id="faceLoginBtn" class="btn-facial">Se connecter avec reconnaissance faciale</button>

            <video id="camera" autoplay muted></video>

            <div class="extra-links mt-3">
                Pas encore membre ? <a href="{{ path('user_register') }}">Créer un compte</a>
            </div>

        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('loginForm');
        const emailInput = document.getElementById('inputEmail');
        const passwordInput = document.getElementById('inputPassword');
        const emailEmpty = document.getElementById('emailEmpty');
        const emailNotFound = document.getElementById('emailNotFound');
        const passwordEmpty = document.getElementById('passwordEmpty');

        const faceLoginBtn = document.getElementById('faceLoginBtn');
        const camera = document.getElementById('camera');

        function resetErrors() {
            emailEmpty.style.display = 'none';
            emailNotFound.style.display = 'none';
            passwordEmpty.style.display = 'none';
        }

        emailInput.addEventListener('blur', () => {
            resetErrors();
            const email = emailInput.value.trim();
            if (email) {
                fetch('{{ path("check_email") }}?email=' + encodeURIComponent(email))
                    .then(res => res.json())
                    .then(data => {
                        if (!data.exists) {
                            emailNotFound.style.display = 'block';
                        }
                    });
            }
        });

        form.addEventListener('submit', (e) => {
            e.preventDefault();
            
            resetErrors();
            let hasError = false;
            if (!emailInput.value.trim()) {
                emailEmpty.style.display = 'block';
                hasError = true;
            }
            if (!passwordInput.value.trim()) {
                passwordEmpty.style.display = 'block';
                hasError = true;
            }
            if (hasError) return;
            
            // Execute reCAPTCHA
            grecaptcha.ready(function() {
                grecaptcha.execute('6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI', {action: 'login'}).then(function(token) {
                    // Add token to form and submit
                    document.getElementById('recaptchaToken').value = token;
                    form.submit();
                });
            });
        });

        // Facial Recognition Login
        faceLoginBtn.addEventListener('click', async () => {
            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                try {
                    const stream = await navigator.mediaDevices.getUserMedia({ video: true });
                    camera.srcObject = stream;
                    camera.style.display = 'block';

                    setTimeout(async () => {
                        const canvas = document.createElement('canvas');
                        canvas.width = camera.videoWidth;
                        canvas.height = camera.videoHeight;
                        const context = canvas.getContext('2d');
                        context.drawImage(camera, 0, 0, canvas.width, canvas.height);

                        const imageData = canvas.toDataURL('image/jpeg');

                        stream.getTracks().forEach(track => track.stop());
                        camera.style.display = 'none';

                        // Send image to server
                        const response = await fetch('{{ path("facial_login_check") }}', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest',
                            },
                            body: JSON.stringify({ image: imageData })
                        });

                        const data = await response.json();
                        if (data.success) {
                            window.location.href = data.redirect_url;
                        } else {
                            alert('Échec de la reconnaissance faciale.');
                        }

                    }, 1500); // 1.5s to let the camera start properly
                } catch (err) {
                    alert('Erreur caméra: ' + err.message);
                }
            } else {
                alert('La caméra n'est pas supportée sur ce navigateur.');
            }
        });
    });
</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>